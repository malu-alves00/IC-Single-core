
//-----------------------ULA---------------------------------//
// sem implementar overflow aritmético

module mux_2to1 (
	input  logic [31:0] a,b,
	input  logic 		  control,
	output logic [31:0] out
);

always_comb begin

case(control)
	1'b0: out = a;
	1'b1: out = b;
	default: out = a;
	
endcase
end

endmodule

module mux_3to1 (
	input  logic [31:0] a,b,c,
	input  logic [1:0]  control,
	output logic [31:0] out
);

	always_comb begin

	case(control)
		2'b00: out = a;
		2'b01: out = b;
		2'b10: out = c;
		default: out = a;
	endcase
end

endmodule 

module alu(
	input  logic  [31:0] a,b,
	input  logic  [2:0]  alu_control,
	output logic  [31:0] result,
	output logic         overflow,
	output logic         zero
);

	wire [32:0] result_ext;
	
	assign result_ext = a + b;
	assign zero = (a+b) == 0 ? 1'b1 : 1'b0;
	
	assign overflow = result_ext[32];
	
	always_comb begin
	
	case(alu_control)
	
		3'b0: begin
					result = a + b;
				end
				
		default: result = 32'b0;
	endcase
	
	end

endmodule

// ------------------- registradores ------------------------//
// PASSOU NOS TESTES


// 32x32, como padrão para RISC-V
// read=0 write=1
// registrador x0 sempre retorna 0
module register_file #(
	parameter DATA_WIDTH = 32, // 32-bits
	parameter NUM_REGS   = 32, // 32 registradores
	parameter INDEX_WIDTH = $clog2(NUM_REGS)
)(
	input  logic                     clk,
	input  logic                     rw, 
	//input  logic                     enable, 
	input  logic [INDEX_WIDTH-1:0]   addr1, 
	input  logic [INDEX_WIDTH-1:0]   addr2, 
	input  logic [INDEX_WIDTH-1:0]   wr_address, 
	input  logic [DATA_WIDTH-1:0]    data_in, 
	output logic [DATA_WIDTH-1:0]    data1_out,
	output logic [DATA_WIDTH-1:0]    data2_out
);

	logic [DATA_WIDTH-1:0] regs[NUM_REGS]; 
	
	always_ff @(posedge clk) begin
		if(rw /*& enable*/ & (wr_address != 'b0)) begin
			regs[wr_address] <= data_in;
		end
	end
	
	assign data1_out = /*enable &*/ !rw & addr1 == 'b0 ? 'b0 :
							 /*enable &*/ !rw ? regs[addr1] : 'hz;
	assign data2_out = /*enable &*/ !rw & addr2 == 'b0 ? 'b0 :
							 /*enable &*/ !rw ? regs[addr2] : 'hz;
endmodule


//-------------PC-------------------------------------------//
// PASSOU NO TESTE
// vai somar 4 durante a etapa do instruction fetch pq não está ocupado nesse momento
// soma vai ser executada pela ULA mesmo

module program_counter #(
	parameter INSTR_WIDTH = 32
)(
	input  logic [INSTR_WIDTH-1:0] PC_next,
	input  logic                   reset, clk, PC_write,
	output logic [INSTR_WIDTH-1:0] PC_state
	
);

always_ff @(posedge clk) begin

	if(reset) PC_state = 32'b0;
	
	else begin
	
		if(PC_write) PC_state <= PC_next;
	
	end
	
end

endmodule


//-------------------n/a register-------------------------//
// literalmente igual ao program counter, mas vai ficar aí porque sou tonta e vou confundir os nomes

module register #(
	parameter INSTR_WIDTH = 32
)(
	input  logic [INSTR_WIDTH-1:0] next_state,
	input  logic                   reset, clk, reg_write,
	output logic [INSTR_WIDTH-1:0] state
	
);

always_ff @(posedge clk) begin

	if(reset) state = 32'b0;
	
	else begin
	
		if(reg_write) state <= next_state;
	
	end
	
end

endmodule

//----------------------------------------------------------//

module register_noen #(
	parameter INSTR_WIDTH = 32
)(
	input  logic [INSTR_WIDTH-1:0] next_state,
	input  logic                   reset, clk,
	output logic [INSTR_WIDTH-1:0] state
	
);

always_ff @(posedge clk) begin

	if(reset) state = 32'b0;
	
	else begin
	
		state <= next_state;
	
	end
	
end

endmodule



//-----------------------RAM------------------------------//
// PASSOU NO TESTE

module main_memory #(
	parameter DATA_WIDTH = 32,
	parameter DATA_DEPTH = 128,
	parameter INDEX_WIDTH = $clog2(DATA_DEPTH)
)(

	input  logic [INDEX_WIDTH-1:0] address,
	input  logic [DATA_WIDTH-1:0]  write_data,
	input  logic                   clk, wr,
	output logic [DATA_WIDTH-1:0]  read_data

);

	logic [DATA_WIDTH-1:0] memory[DATA_DEPTH];
	
	always_ff @(posedge clk) begin
	
		if(wr) memory[address] <= write_data;
		
		else read_data <= memory[address];
		
	end
	
endmodule

//-----------------------IR------------------------------//

module instruction_register #(
	parameter INSTR_WIDTH = 32
)(
	input  logic [INSTR_WIDTH-1:0] read_data,
	input  logic                   reset, clk, IR_write,
	output logic [INSTR_WIDTH-1:0] instruction
	
);

always_ff @(posedge clk) begin

	if(reset) instruction = 32'b0;
	
	else begin
	
		if(IR_write) instruction <= read_data;
	
	end
	
end

endmodule

//--------------------extender----------------------------//

module extend_unit (
	input  logic [24:0] src,
	input  logic [1:0]  imm_src,
	output logic [31:0] imm_ext

);

// falta U type. vai fazer tanta falta assim?

	always_comb begin
		
		case(imm_src)	
		
			2'b00: imm_ext = {{20{src[24]}},src[24:13]}; // I-type
			2'b01: imm_ext = {{20{src[24]}},src[24:18],src[4:0]}; // S-type
			2'b10: imm_ext = {{20{src[24]}},src[0],src[23:18],src[4:1],1'b0}; // branch offset
			2'b11: imm_ext = {{12{src[24]}},src[12:8],src[13],src[23:14], 1'b0}; // J-type
			
			default: imm_ext = 32'b0;
		
		endcase
	end
	
endmodule


/////////////////////////////////////////////////////////////////////////////////////////////////////

//-------------------------decoder--------------------------------//

module alu_decoder (


);


endmodule 

module control_unit (
	input logic [6:0] opcode,
	input logic [3:0] funct3,
	input logic [7:0] funct7,
	input logic 		zero
);


endmodule 




//--------₊✩‧₊˚౨ৎ˚₊✩‧₊----core-----₊✩‧₊˚౨ৎ˚₊✩‧₊--------//
// cavalo xbox? 

// continuar na figura 7.26 - enhanced datapath for beq

module tiliqua_squamata_v0 (

input logic clk,
input logic reset

);

	// sugestão: colocar wires de controle como maiusculo, wires de dados como minusculo

	// datapath controle
	
	wire ir_write, pc_write, wr_mem_enable, wr_ir_enable, reg_file_write, adr_src;
	wire [1:0] imm_src, alu_src_a, alu_src_b, result_src;
	wire [2:0] alu_control;

	// datapath dados

	wire [31:0] pc, pc_next, read_data, instr, imm_ext, rf_out_1, rf_out_2, A, B, src_a, src_b, alu_result, alu_out, result, mem_out_data, selected_mem_addr, old_pc;
	
	// bus separation (qual a palavra pra isso mesmo?)
	
	
	//instr -> 19:15 = RS1
				//24:20 = RS2
				//11:7  = Rd
				
				//31:7  = extend
	
	
	// program counter
	register program_counter(
									.next_state(pc_next),
									.reset(reset),
									.clk(clk),
									.reg_write(pc_write),
									.state(pc)
								  );
				  
	// registrador para selecionar valor do pc e incrementá-lo para 4 quando for buscar próxima instrução
	register add_pc_sel(
								.next_state(pc),
								.reset(reset),
								.clk(clk),
								.reg_write(wr_ir_enable),
								.state(old_pc)
							 );
	
	
	// selecionar de onde vem endereço da memória (pc ou registrador)
	mux_2to1 select_mem_addr(
									 .a(pc),
									 .b(result),
									 .control(adr_src),
									 .out(selected_mem_addr)
									);
	
	
	
	// RAM 7 bits de address
	main_memory memory(
							.address(selected_mem_addr[6:0]),
							.write_data(B), //
							.clk(clk),
							.wr(wr_mem_enable),
							.read_data(read_data)
							);
	
	// registrador n/a saída memoria
	register mem_out (
							.next_state(read_data),
							.reset(reset),
							.clk(clk),
							.state(mem_out_data)
							);
	
	
	// registrador de instruções
	register instr_reg(
								.next_state(read_data),
								.reset(reset),
								.clk(clk),
								.reg_write(wr_ir_enable),
								.state(instr)
							 );
	
	// register file
	register_file rf(
						  .clk(clk), 
						  .addr1(instr[19:15]), 
						  .addr2(instr[24:20]), 
						  .wr_address(instr[11:7]), 
						  .data_in(result), 
						  .rw(reg_file_write), 
						  .data1_out(rf_out_1),
						  .data2_out(rf_out_2)
						 );
							 
	
	// registrador n/a saida 1 do register file
	register rf_data1_out(
								.next_state(rf_out_1),
								.reset(reset),
								.clk(clk),
								.state(A)
								);
	
	// registrador n/a saida 2 do register file
	register rf_data2_out(
								.next_state(rf_out_2),
								.reset(reset),
								.clk(clk),
								.state(B)
								);
	
	// extend unit
	extend_unit eu(
						 .src(instr[31:7]),
						 .imm_src(imm_src),
						 .imm_ext(imm_ext)
					  );
	
	// mux para selecionar src_a da ULA
	// CONFIRMAR QUAIS BITS DEIXAM QUAL SAÍDA HEIN!!!
	// A = 
	// B = 
	// C = 
	
	mux_3to1 mux_src_a_select(
										 .a(pc),
										 .b(old_pc), 
										 .c(A),
										 .control(alu_src_a),
										 .out(src_a)
									  );
									  
	// mux para selecionar src_b da ULA
	
	mux_3to1 mux_src_b_select(
										 .a(B),
										 .b(imm_ext),
										 .c(8'h00000004),
										 .control(alu_src_b),
										 .out(src_b)
									  );
									  
	// BEHOLD: *~a grande e preciosa ULA!~*
	alu alu(
				.a(src_a),
				.b(src_b),
				.alu_control(alu_control),
				.overflow(),
				.zero_flag(),
				.result(alu_result)
			 );
			 
	// registrador n/a saída da ULA
	register ula_out (
							.next_state(alu_result),
							.reset(reset),
							.clk(clk),
							.state(alu_out)
							);
							
							
	mux_3to1 mux_alu_out_select(
										 .a(alu_out),
										 .b(mem_out_data),
										 .c(alu_result),
										 .control(result_src),
										 .out(result)
								    	  );

endmodule 


/*
miau?! parece que você chegou no fim do código!

	 ╱|、
	(˚。 7  
	|`  〵          
	じしˍ, )ノ


*/